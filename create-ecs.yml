AWSTemplateFormatVersion: 2010-09-09
Description: Creating ECS service
Parameters:
  AppName:
    Type: String
    Description: Name of app requiring ELB exposure
    Default: ecs-app
  AppContainerPort:
    Type: Number
    Description: Container port of app requiring ELB exposure
    Default: '80'
  AppHostPort:
    Type: Number
    Description: Host port of app requiring ELB exposure
    Default: '80'
  ClusterName:
    Type: String
    Default: ecs-cluster
  ServiceName:
    Type: String
    Default: ecs-service
  Name:
    Type: String
    Default: ecs-alb
  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: '30'
    
Resources:
  cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      
  ecr: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "scala-image-repo"
#       RepositoryPolicyText: 
#         Version: "2012-10-17"
#         Statement: 
#           - 
#             Sid: AllowPushPull
#             Effect: Allow
#             Principal: 
#               AWS: 
#                 - "arn:aws:iam::654328202400:user/cloud_user"              
#             Action: 
#               - "ecr:GetDownloadUrlForLayer"
#               - "ecr:BatchGetImage"
#               - "ecr:BatchCheckLayerAvailability"
#               - "ecr:PutImage"
#               - "ecr:InitiateLayerUpload"
#               - "ecr:UploadLayerPart"
#               - "ecr:CompleteLayerUpload"
      
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !Ref Role
#       arn:aws:iam::654328202400:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: 2048
      Memory: 4096
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: amazon/amazon-ecs-sample
          Cpu: '10'
          PortMappings:
            - ContainerPort: !Ref AppContainerPort
              HostPort: !Ref AppHostPort
          EntryPoint:
            - /usr/sbin/apache2
            - '-D'
            - FOREGROUND
          Memory: '500'
          Essential: true
        - Name: scala-image
          Image: 654328202400.dkr.ecr.us-east-1.amazonaws.com/scala-image-repo
          Cpu: '10'
          EntryPoint:
            - sh
            - '-c'
          Memory: '500'
          Essential: false
                   
  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 0
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      LoadBalancers:
        - ContainerName: !Ref AppName
          ContainerPort: !Ref AppContainerPort
          LoadBalancerName: !Ref elb
      PlacementStrategies:
        - Type: binpack
          Field: memory
        - Type: spread
          Field: host
      PlacementConstraints:
        - Type: memberOf
          Expression: 'attribute:ecs.availability-zone != us-east-1d'
        - Type: distinctInstance
      TaskDefinition: !Ref taskdefinition
      ServiceName: !Ref ServiceName
      Role: !Ref Role
      
  alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Ref Name
#       Listeners:
#         - InstancePort: !Ref AppHostPort
#           LoadBalancerPort: '80'
#           Protocol: HTTP
      Subnets:
        - !Ref Subnet1
    DependsOn: GatewayAttachment
    
  ALBHTTPlistener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
     DefaultActions:
       - Type: "redirect"
         RedirectConfig:
           Protocol: "HTTPS"
           Port: "443"
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"
     LoadBalancerArn: !Ref alb
     Port: 80
     Protocol: "HTTP"
    
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/25
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
      
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
Outputs:
  Cluster:
    Value: !Ref cluster
