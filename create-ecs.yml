AWSTemplateFormatVersion: 2010-09-09
Description: Creating ECS service
Parameters:
  AppName:
    Type: String
    Description: Name of app requiring ALB exposure
    Default: ecs-app
  AppContainerPort:
    Type: Number
    Description: Container port of app requiring ALB exposure
    Default: '9000'
  AppHostPort:
    Type: Number
    Description: Host port of app requiring ALB exposure
    Default: '9000'
  ClusterName:
    Type: String
    Default: cluster
  ServiceName:
    Type: String
    Default: ecs-service
  EnvironmentName:
    Type: String
    Default: Scala
  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: '30'
  LoadBalancerScheme:
    Type: String
    Default: 'internet-facing'
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-00fd91bfe4bf20d22
  Subnets:
    Type: CommaDelimitedList
    Default: subnet-05d557015d27fb217, subnet-00369d3316a7b62bd
#   SecurityGroup:
#     Type: AWS::EC2::SecurityGroup::Id
#     Default: 
    
Resources: 

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: 0.0.0.0/0
      
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
        
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
  
  cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      
  ecr: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "scala-image-repo"
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal: 
              AWS: 
                - "arn:aws:iam::566716581275:user/cloud_user"              
            Action: 
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
      
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !Ref Role
#       arn:aws:iam::654328202400:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: 2048
      Memory: 4096
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: 566716581275.dkr.ecr.us-east-1.amazonaws.com/scala-image-repo:latest
          Cpu: '10'
          PortMappings:
            - ContainerPort: !Ref AppContainerPort
              HostPort: !Ref AppHostPort
          Memory: '500'
          Essential: true
        - Name: scala-image
          Image: 566716581275.dkr.ecr.us-east-1.amazonaws.com/scala-image-repo:latest
          Cpu: '10'
          Memory: '500'
          Essential: false                  
      
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: !Ref Subnets 
#       SecurityGroups:
#         - !GetAtt "ALBSecurityGroup.GroupId"
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      TargetType: ip
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP      
   
  service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ClusterName
      ServiceName: !Ref ServiceName
      LaunchType: FARGATE
      TaskDefinition: !Ref taskdefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: '0'
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      LoadBalancers:
        - ContainerName: !Ref "AppName"
          ContainerPort: !Ref AppContainerPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          Subnets: !Ref Subnets 
#           SecurityGroups: !Ref TaskSecurityGroup          
#       Role: !Ref Role
     
#   Cron:
#     Type: AWS::Events::Rule
#     Properties:
#       Description: !Sub 'Run the ECS task every 10 minutes'
#       ScheduleExpression: cron(10 * * * ? *)
#       State: ENABLED
#       Targets:
#       - Arn: !GetAtt 
#           - cluster
#           - Arn
#         RoleArn: !GetAtt 
#           - Role
#           - Arn
#         Id: !Ref ServiceName
# #         RoleArn: !Ref Role
#         EcsParameters:
#           TaskDefinitionArn: !Ref taskdefinition 
# #           TaskDefinitionArn: !GetAtt 
# #           - taskdefinition
# #           - Arn
#           TaskCount: 1
#           LaunchType: 'FARGATE'
#           PlatformVersion: 'LATEST'
#           NetworkConfiguration:
#             AwsVpcConfiguration:
#               AssignPublicIp: DISABLED
# #               SecurityGroups: 
# #                 - !GetAtt "TaskSecurityGroup.GroupId"
#               Subnets: !Ref Subnets
