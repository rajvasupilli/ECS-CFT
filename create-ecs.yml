AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate.
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-03282e125604dceea
  SubnetA:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-016f6ff7c3504c595
  SubnetB:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-096149c6d9d375485
#   Certificate:
#     Type: String
#     # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
#     Default: 'arn:aws:acm:region:123456789012:certificate/00000000-0000-0000-0000-000000000000'
  Image:
    Type: String
    # Update with the Docker image. "You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag)."
    Default: 668693617583.dkr.ecr.us-east-1.amazonaws.com/scala-image-repo:latest
  ServiceName:
    Type: String
    # update with the name of the service
    Default: ECSService
  ContainerPort:
    Type: Number
    Default: 9000
#   LoadBalancerPort:
#     Type: Number
#     Default: 80
#   HealthCheckPath:
#     Type: String
#     Default: /healthcheck
#   HostedZoneName:
#     Type: String
#     Default: company.com
#   Subdomain:
#     Type: String
#     Default: myservice
  # for autoscaling
  MinContainers:
    Type: Number
    Default: 2
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 5
#   # target CPU utilization (%)
#   AutoScalingTargetValue:
#     Type: Number
#     Default: 50
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]
      
  ECR: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "scala-image-repo"
      
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref Role
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 4096
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
#           # Send logs to CloudWatch Logs
#           LogConfiguration:
#             LogDriver: awslogs
#             Options:
#               awslogs-region: !Ref AWS::Region
#               awslogs-group: !Ref LogGroup
#               awslogs-stream-prefix: ecs
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
 
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: !Ref VPC
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: !Ref ContainerPort
#           ToPort: !Ref ContainerPort
#           SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
 
  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
#     DependsOn:
#       - ListenerHTTP
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 0
#       # This may need to be adjusted if the container takes a while to start up
#       HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
#       LoadBalancers:
#         - ContainerName: !Ref ServiceName
#           ContainerPort: !Ref ContainerPort
#           TargetGroupArn: !Ref TargetGroup
