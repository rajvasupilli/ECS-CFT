AWSTemplateFormatVersion: 2010-09-09
Description: Creating ECS service
Parameters:
  AppName:
    Type: String
    Description: Name of app requiring ALB exposure
    Default: ecs-app
  AppContainerPort:
    Type: Number
    Description: Container port of app requiring ALB exposure
    Default: '80'
  AppHostPort:
    Type: Number
    Description: Host port of app requiring ALB exposure
    Default: '80'
  ClusterName:
    Type: String
    Default: ecs-cluster
  ServiceName:
    Type: String
    Default: ecs-service
  EnvironmentName:
    Type: String
    Default: Scala
  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: '30'
  LoadBalancerScheme:
    Type: String
    Default: 'internet-facing'
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-0579434dafbf2a0a8
  Subnets:
    Type: CommaDelimitedList
    Default: subnet-068bd136245635a41, subnet-020d1f3f0c3f9082b
#   SecurityGroup:
#     Type: AWS::EC2::SecurityGroup::Id
#     Default: 
    
Resources: 

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
  
  cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      
  ecr: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "scala-image-repo"
#       RepositoryPolicyText: 
#         Version: "2012-10-17"
#         Statement: 
#           - 
#             Sid: AllowPushPull
#             Effect: Allow
#             Principal: 
#               AWS: 
#                 - "arn:aws:iam::167996500928:user/cloud_user"              
#             Action: 
#               - "ecr:GetDownloadUrlForLayer"
#               - "ecr:BatchGetImage"
#               - "ecr:BatchCheckLayerAvailability"
#               - "ecr:PutImage"
#               - "ecr:InitiateLayerUpload"
#               - "ecr:UploadLayerPart"
#               - "ecr:CompleteLayerUpload"
      
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !Ref Role
#       arn:aws:iam::654328202400:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: 2048
      Memory: 4096
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: 065379774893.dkr.ecr.us-east-1.amazonaws.com/scala-image-repo
          Cpu: '10'
          PortMappings:
            - ContainerPort: !Ref AppContainerPort
              HostPort: !Ref AppHostPort
          EntryPoint:
            - /usr/sbin/apache2
            - '-D'
            - FOREGROUND
          Memory: '500'
          Essential: true
        - Name: scala-image
          Image: 065379774893.dkr.ecr.us-east-1.amazonaws.com/scala-image-repo
          Cpu: '10'
          EntryPoint:
            - sh
            - '-c'
          Memory: '500'
          Essential: false                  
      
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: !Ref Subnets 
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      TargetType: ip
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP 
   
  service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: '2'
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      LoadBalancers:
        - ContainerName: !Ref "AppName"
          ContainerPort: !Ref AppContainerPort
          TargetGroupArn: !Ref TargetGroup
      PlacementStrategies:
        - Type: binpack
          Field: memory
        - Type: spread
          Field: host
      PlacementConstraints:
        - Type: memberOf
          Expression: 'attribute:ecs.availability-zone != us-east-1d'
        - Type: distinctInstance
      TaskDefinition: !Ref taskdefinition
      ServiceName: !Ref ServiceName
      Role: !Ref Role
  
